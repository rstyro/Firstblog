<beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context" 
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:aop="http://www.springframework.org/schema/aop" 
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:task="http://www.springframework.org/schema/task" 
  xsi:schemaLocation="http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd 
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd">

	 
	<context:annotation-config/>
	<context:component-scan base-package="com.lrs.blog"/>
	
	<context:property-placeholder location="classpath:config/config-*.properties" />
	
	<!-- 定时任务配置 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy" />
    <task:scheduler id="qbScheduler" pool-size="10" />
	
	<!-- 整合redis -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
        <property name="testOnReturn" value="${redis.testOnReturn}" />
        <property name="numTestsPerEvictionRun" value="1024" />  
        <property name="timeBetweenEvictionRunsMillis" value="30000" />  
        <property name="minEvictableIdleTimeMillis" value="-1" />  
        <property name="softMinEvictableIdleTimeMillis" value="10000" />  
        <property name="maxWaitMillis" value="10000" />  
        <property name="testWhileIdle" value="true" />  
        <property name="jmxEnabled" value="true" />  
        <property name="jmxNamePrefix" value="youyuan" />  
        <property name="blockWhenExhausted" value="false" />   
    </bean>  
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.port}"></constructor-arg>
                    <constructor-arg name="timeout" value="${redis.timeout}"></constructor-arg>
                    <constructor-arg name="weight" value="1"></constructor-arg>
                </bean>
            </list>
        </constructor-arg>
    </bean> 

	<!-- 啊里 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
    <!-- 基本属性 url、user、password --> 
    <property name="url" value="${jdbc.url}" /> 

    <property name="username" value="${jdbc.username}" /> 

    <property name="password" value="${jdbc.password}" /> 

    <!-- 配置初始化大小、最小、最大 --> 
    <property name="initialSize" value="1" /> 

    <property name="minIdle" value="1" />  

    <property name="maxActive" value="20" /> 

    <!-- 配置获取连接等待超时的时间 --> 
    <property name="maxWait" value="60000" /> 

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
    <property name="timeBetweenEvictionRunsMillis" value="60000" /> 

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
    <property name="minEvictableIdleTimeMillis" value="300000" /> 

    <property name="validationQuery" value="SELECT 'x'" /> 

    <property name="testWhileIdle" value="true" /> 

    <property name="testOnBorrow" value="false" /> 

    <property name="testOnReturn" value="false" /> 

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
    <property name="poolPreparedStatements" value="true" /> 

    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> 
    
    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --> 
    <property name="filters" value="stat" />  
</bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lrs.blog.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
		<!-- mapper扫描 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 通过Spring进行事务的管理，我们需要增加Spring注解的事务管理机制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource" />
	</bean>	  
	
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面
     --> 
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceOperation" expression="execution(* com.lrs.blog.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>
    
    <!-- shiro -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	    <property name="realm" ref="myRealm"/>  
	</bean>
	
	<bean id="myRealm" class="com.lrs.blog.interceptor.MyShiroRealm"/>  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <property name="securityManager" ref="securityManager"/>  
	    <property name="loginUrl" value="/"/>  
	    <property name="unauthorizedUrl" value="/"/>  
	    <property name="filterChainDefinitions">  
	        <value>  	
	      		  /**				=anon             
	             <!-- 
	             /user**/**			=anon 
	             /page/**			=anon
	             /static/**			=anon
	             /article/**		=anon
	             /** 				=authc 
	              -->
	        </value>  
	    </property>
	</bean>  
    
</beans>